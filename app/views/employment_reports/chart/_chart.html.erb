<div class="container-fluid px-0">
  <div class="card shadow-sm mb-4">
    <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center w-100">
      <h3 class="mb-0">School Comparison</h3>
      <span class="text-light"><%= params[:metric]&.titleize&.gsub('Job Offer Rate', 'Seeking Job Offer Rate') || 'Seeking Job Offer Rate' %></span>
    </div>
    <div class="card-body" style="height: 500px; padding: 20px;">
      <canvas id="schoolComparisonChart"></canvas>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const ctx = document.getElementById('schoolComparisonChart').getContext('2d');
  
  const initialData = <%= raw @filtered_data.to_json %>;
  const selectedProgram = '<%= @selected_program.name %>';
  
  // Sort the data by values in descending order
  const sortedIndices = initialData.datasets[0].data
    .map((value, index) => ({ value, index }))
    .sort((a, b) => b.value - a.value)
    .map(item => item.index);
    
  // Reorder the labels and data
  initialData.labels = sortedIndices.map(i => initialData.labels[i]);
  initialData.datasets[0].data = sortedIndices.map(i => initialData.datasets[0].data[i]);
  
  // Set colors based on selected program
  initialData.datasets[0].backgroundColor = initialData.labels.map(label => 
    label === selectedProgram ? '#4285f4' : '#e9ecef'
  );
  initialData.datasets[0].borderColor = initialData.labels.map(label => 
    label === selectedProgram ? '#4285f4' : '#e9ecef'
  );
  
  // Find the maximum value and add 10% padding
  const maxValue = Math.max(...initialData.datasets[0].data);
  const paddedMax = Math.ceil(maxValue * 1.1);

  window.myChart = new Chart(ctx, {
    type: 'bar',
    data: initialData,
    options: {
      indexAxis: 'y',
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false
        },
        annotation: {
          annotations: {
            line1: {
              type: 'line',
              xMin: initialData.datasets[1].data[0],
              xMax: initialData.datasets[1].data[0],
              borderColor: '#dc3545',
              borderWidth: 2,
              borderDash: [5, 5],
              drawTime: 'afterDatasetsDraw'
            }
          }
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          grid: {
            display: false
          },
          ticks: {
            font: {
              size: 13
            }
          }
        },
        x: {
          beginAtZero: true,
          grid: {
            color: '#f0f0f0'
          },
          min: 0,
          max: paddedMax,
          ticks: {
            font: {
              size: 12
            },
            callback: function(value) {
              return value + '%';
            }
          }
        }
      }
    }
  });
});
</script>

<%= content_for :javascript do %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Chart.js initialization for industry breakdown
      const industryCtx = document.getElementById('industryChart').getContext('2d');
      new Chart(industryCtx, {
          type: 'pie',
          data: {
              labels: ['Consulting', 'Finance', 'Technology', 'Other'],
              datasets: [{
                  data: [35, 25, 20, 20],
                  backgroundColor: [
                      '#007bff',
                      '#28a745',
                      '#ffc107',
                      '#dc3545'
                  ]
              }]
          }
      });

      // Chart.js initialization for geographic distribution
      const geoCtx = document.getElementById('geographyChart').getContext('2d');
      new Chart(geoCtx, {
          type: 'pie',
          data: {
              labels: ['Northeast US', 'West Coast', 'International', 'Other US'],
              datasets: [{
                  data: [45, 30, 15, 10],
                  backgroundColor: [
                      '#007bff',
                      '#28a745',
                      '#ffc107',
                      '#dc3545'
                  ]
              }]
          }
      });
    });
  </script>

  <%= content_for :head do %>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation"></script>
  <% end %>
<% end %> 
