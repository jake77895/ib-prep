<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Career Tree</title>
    <!-- Include Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <div class="mb-4 mt-4 px-4">
      <div class="card shadow-sm position-relative">
        <!-- Back Button -->
        <%= link_to params[:origin_page] || root_path, class: 'btn btn-light rounded-circle shadow-sm d-flex align-items-center justify-content-center position-absolute', style: 'width: 40px; height: 40px; top: 10px; left: 10px;' do %>
          <span class="fs-6">&larr;</span>
        <% end %>

        <!-- Title and Description -->
        <div class="card-body text-center bg-light">
          <h1 class="fw-bold text-uppercase" style="letter-spacing: 1px; margin-bottom: 10px; margin-top: 10px;">Career Tree</h1>
          <p class="text-muted" style="font-size: 14px;">Explore your future</p>
        </div>



      </div>

    </div>

    <div class="px-4">
      <div class="row">
        <div class="col-4">
          <%= link_to "Overview", overview_career_data_path, class: "btn btn-dark w-100" %>
        </div>
        <div class="col-4">
          <%= link_to "Career Change", change_career_data_path, class: "btn btn-dark w-100" %>
        </div>
        <div class="col-4">
          <%= link_to "Career Start", start_career_data_path, class: "btn btn-dark w-100" %>
        </div>
      </div>
    </div>


    <div class="mb-4 mt-4 px-4">
      <div class="card shadow-sm position-relative">
        <div class="card-body">
          <div id="categories" class="text-center py-0 px-3"></div>
          <div id="chart" style="overflow-x: auto; white-space: nowrap;"></div>
        </div>
      </div>
    </div>

    <!--Rendering the node modal-->
    <%= render 'career_data/node_modal' %>



    <!-- Include D3.js -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const data = [
          {
            category: "Venture Capital",
            nodes: [
              { id: 1, name: "Analyst", level: 1 },
              { id: 2, name: "Pre-MBA associate", level: 2 },
              { id: 3, name: "Senior associate", level: 3 },
              { id: 4, name: "Principal", level: 4 },
              { id: 5, name: "Partner", level: 5 },
            ],
            links: [
              { source: 1, target: 2 },
              { source: 2, target: 3 },
              { source: 3, target: 4 },
              { source: 4, target: 5 },
            ],
          },
          {
            category: "Private Equity",
            nodes: [
              { id: 6, name: "Analyst", level: 1 },
              { id: 7, name: "Associate", level: 2 },
              { id: 8, name: "Vice president", level: 3 },
              { id: 9, name: "Principal", level: 4 },
              { id: 10, name: "Partner", level: 5 },
            ],
          },
          {
            category: "Hedge Fund",
            nodes: [
              { id: 11, name: "Junior Analyst", level: 1 },
              { id: 12, name: "Research Associate", level: 2 },
              { id: 13, name: "Fund Analyst", level: 3 },
              { id: 14, name: "Sector Head", level: 4 },
              { id: 15, name: "Portfolio Manager", level: 5 },
            ],
          },
          {
            category: "Investment Banking",
            nodes: [
              { id: 16, name: "Analyst", level: 1 },
              { id: 17, name: "Associate", level: 2 },
              { id: 18, name: "Vice president", level: 3 },
              { id: 19, name: "Senior vice president", level: 4 },
              { id: 20, name: "Managing director", level: 5 },
            ],
          },
          {
            category: "Corporate Development",
            nodes: [
              { id: 21, name: "Analyst", level: 1 },
              { id: 22, name: "Associate", level: 2 },
              { id: 23, name: "Manager", level: 3 },
              { id: 24, name: "Director", level: 4 },
              { id: 25, name: "Vice president", level: 5 },
            ],
          },
          {
            category: "FP&A",
            nodes: [
              { id: 26, name: "Analyst", level: 1 },
              { id: 27, name: "Senior Analyst", level: 2 },
              { id: 28, name: "Manager", level: 3 },
              { id: 29, name: "Director", level: 4 },
              { id: 30, name: "Vice president", level: 5 },
            ],
          },
          {
            category: "Other",
            nodes: [
              { id: 31, name: "Entry Level", level: 1 },
              { id: 32, name: "Mid Level", level: 2 },
              { id: 33, name: "Senior Level", level: 3 },
              { id: 34, name: "Lead", level: 4 },
              { id: 35, name: "Executive", level: 5 },
            ],
          },
        ];

        const minCategoryWidth = 200;
        const calculatedWidth = data.length * minCategoryWidth;
        const width = Math.max(window.innerWidth, calculatedWidth);
        const height = 750;
        const buttonHeight = 40;
        const buttonMarginBelow = 20;
        const margin = { top: buttonHeight + buttonMarginBelow + 20, right: 50, bottom: 50, left: 50 };
        const levelSpacing = (height - margin.top - margin.bottom) / 5;
        const categoryWidth = width / data.length;

        const svg = d3
          .select("#chart")
          .append("svg")
          .attr("width", width)
          .attr("height", height)
          .style("font-family", "Arial");

        const defs = svg.append("defs");

        defs.append("marker")
          .attr("id", "arrowhead-solid")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 25)
          .attr("refY", 5)
          .attr("markerWidth", 6)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
          .append("path")
          .attr("d", "M 0 0 L 10 5 L 0 10 Z")
          .attr("fill", "#333");

        defs.append("marker")
          .attr("id", "arrowhead-dashed")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 6)
          .attr("refY", 5)
          .attr("markerWidth", 6)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
          .append("path")
          .attr("d", "M 0 0 L 10 5 L 0 10 Z")
          .attr("fill", "#ff0000");

        defs.append("marker")
          .attr("id", "arrowhead-thick")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 6)
          .attr("refY", 5)
          .attr("markerWidth", 8)
          .attr("markerHeight", 8)
          .attr("orient", "auto")
          .append("path")
          .attr("d", "M 0 0 L 10 5 L 0 10 Z")
          .attr("fill", "#007bff");

        const levelIconPaths = {
          1: "<%= asset_path('icons/career_tree_icons/level_1.svg') %>",
          2: "<%= asset_path('icons/career_tree_icons/level_2.svg') %>",
          3: "<%= asset_path('icons/career_tree_icons/level_3.svg') %>",
          4: "<%= asset_path('icons/career_tree_icons/level_4.svg') %>",
          5: "<%= asset_path('icons/career_tree_icons/level_5.svg') %>",
        };

        data.forEach((categoryData, i) => {
          const group = svg
            .append("g")
            .attr(
              "transform",
              `translate(${i * categoryWidth + categoryWidth / 2}, ${
                margin.top + buttonHeight + buttonMarginBelow
              })`
            );

          const textElement = svg
            .append("text")
            .attr("x", i * categoryWidth + categoryWidth / 2)
            .attr("y", margin.top - 30)
            .attr("class", "career_tree_industry_button_text")
            .attr("text-anchor", "middle")
            .style("font-weight", "bold")
            .style("font-size", "16px")
            .text(categoryData.category);

          const textWidth = textElement.node().getComputedTextLength();
          const buttonWidth = Math.max(textWidth + 20, 200);

          svg
            .append("rect")
            .attr("x", i * categoryWidth + categoryWidth / 2 - buttonWidth / 2)
            .attr("y", margin.top - 50)
            .attr("width", buttonWidth)
            .attr("height", buttonHeight)
            .attr("rx", 20)
            .attr("ry", 20)
            .attr("class", "career_tree_industry_button"); // Use external class for styling;

          textElement.raise();

          // Add links
          group
            .selectAll(".link")
            .data(categoryData.links || [])
            .enter()
            .append("line")
            .attr("class", "link")
            .attr("x1", 0)
            .attr(
              "y1",
              (d) =>
                (categoryData.nodes.find((node) => node.id === d.source).level - 1) *
                levelSpacing
            )
            .attr("x2", 0)
            .attr(
              "y2",
              (d) =>
                (categoryData.nodes.find((node) => node.id === d.target).level - 1) *
                levelSpacing
            )
            .attr("stroke", "#333")
            .attr("stroke-width", 2)
            .attr("marker-end", "url(#arrowhead-solid)"); // Add arrowhead marker

          const nodeGroup = group
            .selectAll(".node")
            .data(categoryData.nodes)
            .enter()
            .append("g")
            .attr("class", "node")
            .attr(
              "transform",
              (d) => `translate(0, ${(d.level - 1) * levelSpacing})`
            );

          nodeGroup
            .append("circle")
            .attr("r", 20)
            .attr("fill", "#f8f9fa")
            .attr("stroke", "#ccc")
            .attr("stroke-width", 2);

          Object.entries(levelIconPaths).forEach(([level, path]) => {
            nodeGroup
              .filter((d) => d.level === +level)
              .append("image")
              .attr("href", path)
              .attr("width", 24)
              .attr("height", 24)
              .attr("x", -12)
              .attr("y", -12);
          });

          nodeGroup.each(function (d) {
            const group = d3.select(this);
            const textElement = group
              .append("text")
              .attr("text-anchor", "middle")
              .attr("dy", 35)
              .text(d.name);

            const textWidth = textElement.node().getComputedTextLength();
            const textHeight = 11;

            group
              .insert("rect", "text")
              .attr("x", -textWidth / 2 - 5)
              .attr("y", 35 - textHeight / 2 - 2)
              .attr("width", textWidth + 10)
              .attr("height", textHeight)
              .attr("rx", 4)
              .attr("ry", 4)
              .attr("fill", "white")
              .attr("opacity", 1);

                group.style("cursor", "pointer").on("click", () => {
                // Update modal content
                  document.getElementById("modal-industry").textContent = categoryData.category;
                  document.getElementById("modal-level").textContent = d.name;
                  document.getElementById("modal-record-count").textContent = "10"; // Replace with actual data if available
                  document.getElementById("modal-avg-salary").textContent = "$100,000"; // Replace with actual data
                  document.getElementById("modal-avg-bonus").textContent = "$20,000"; // Replace with actual data
                  document.getElementById("modal-avg-total-comp").textContent = "$120,000";
                  document.getElementById("modal-avg-comp-per-hour").textContent = "$50";

                  // Show the modal using Bootstrap
                  new bootstrap.Modal(document.getElementById("nodeModal")).show();
                });
          });
        });
      });
    </script>
  </body>
</html>
