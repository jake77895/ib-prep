<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Career Tree</title>
    <!-- Include Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <style>
      .node circle {
        fill: #f8f9fa;
        stroke: #ccc;
        stroke-width: 2px;
      }
      .node text {
        font-size: 12px;
        fill: #333;
      }
    </style>
  </head>
  <body>
    
    <div class="mb-4 mt-4 px-4">
      <div class="card shadow-sm position-relative">
        <!-- Back Button -->
        <%= link_to params[:origin_page] || root_path, class: 'btn btn-light rounded-circle shadow-sm d-flex align-items-center justify-content-center position-absolute', style: 'width: 40px; height: 40px; top: 10px; left: 10px;' do %>
          <span class="fs-6">&larr;</span>
        <% end %>

        <!-- Title and Description -->
        <div class="card-body text-center bg-light">
          <h1 class="fw-bold text-uppercase" style="letter-spacing: 1px; margin-bottom: 10px; margin-top: 10px;">Career Tree</h1>
          <p class="text-muted" style="font-size: 14px;">Explore your future</p>
        </div>
      </div>
    </div>
    
    <div id="categories" class="text-center py-0 px-3"></div>
    <div id="chart"></div>

    <!-- Include D3.js -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
      <script>
      document.addEventListener("DOMContentLoaded", () => {
        const data = [
          {
            category: "Venture Capital",
            nodes: [
              { id: 1, name: "Analyst", level: 1 },
              { id: 2, name: "Pre-MBA associate", level: 2 },
              { id: 3, name: "Senior associate", level: 3 },
              { id: 4, name: "Principal", level: 4 },
              { id: 5, name: "Partner", level: 5 },
            ],
          },
          {
            category: "Private Equity",
            nodes: [
              { id: 6, name: "Analyst", level: 1 },
              { id: 7, name: "Associate", level: 2 },
              { id: 8, name: "Vice president", level: 3 },
              { id: 9, name: "Principal", level: 4 },
              { id: 10, name: "Partner", level: 5 },
            ],
          },
          {
            category: "Hedge Fund",
            nodes: [
              { id: 11, name: "Junior Analyst", level: 1 },
              { id: 12, name: "Research Associate", level: 2 },
              { id: 13, name: "Fund Analyst", level: 3 },
              { id: 14, name: "Sector Head", level: 4 },
              { id: 15, name: "Portfolio Manager", level: 5 },
            ],
          },
          {
            category: "Investment Banking",
            nodes: [
              { id: 16, name: "Analyst", level: 1 },
              { id: 17, name: "Associate", level: 2 },
              { id: 18, name: "Vice president", level: 3 },
              { id: 19, name: "Senior vice president", level: 4 },
              { id: 20, name: "Managing director", level: 5 },
            ],
          },
          {
            category: "Corporate Development",
            nodes: [
              { id: 21, name: "Analyst", level: 1 },
              { id: 22, name: "Associate", level: 2 },
              { id: 23, name: "Manager", level: 3 },
              { id: 24, name: "Director", level: 4 },
              { id: 25, name: "Vice president", level: 5 },
            ],
          },
          {
            category: "FP&A",
            nodes: [
              { id: 26, name: "Analyst", level: 1 },
              { id: 27, name: "Senior Analyst", level: 2 },
              { id: 28, name: "Manager", level: 3 },
              { id: 29, name: "Director", level: 4 },
              { id: 30, name: "Vice president", level: 5 },
            ],
          },
          {
            category: "Other",
            nodes: [
              { id: 31, name: "Entry Level", level: 1 },
              { id: 32, name: "Mid Level", level: 2 },
              { id: 33, name: "Senior Level", level: 3 },
              { id: 34, name: "Lead", level: 4 },
              { id: 35, name: "Executive", level: 5 },
            ],
          },
        ];

        const width = window.innerWidth; // Dynamically set width to screen width // Total width of the chart
        const height = 750; // Total height of the chart
        const margin = { top: 60, right: 50, bottom: 50, left: 50 };
        const levelSpacing = (height - margin.top - margin.bottom) / 5;
        const categoryWidth = width / data.length;

        const svg = d3
          .select("#chart")
          .append("svg")
          .attr("width", width)
          .attr("height", height)
          .style("font-family", "Arial");

        data.forEach((categoryData, i) => {
        const group = svg.append("g");

        // Create text element first to measure its length
        const textElement = group
          .append("text")
          .attr("x", i * categoryWidth + categoryWidth / 2) // Center horizontally
          .attr("y", margin.top - 30) // Position text within the rectangle
          .attr("text-anchor", "middle")
          .attr("class", "career_tree_industry_button_text") // Use external class
          .text(categoryData.category);

        // Measure the text width
        const textWidth = textElement.node().getComputedTextLength();

        // Add some padding for the button
        const padding = 20; // 10px padding on each side
        const minButtonWidth = 200; // Minimum button width in pixels
        const buttonWidth = Math.max(textWidth + padding, minButtonWidth); // Ensure minimum size

        // Add a rectangle for the button background
        group
          .append("rect")
          .attr("x", i * categoryWidth + categoryWidth / 2 - buttonWidth / 2) // Center horizontally
          .attr("y", margin.top - 50) // Position above the nodes
          .attr("width", buttonWidth) // Dynamically set width based on text or minimum
          .attr("height", 40) // Height of the button
          .attr("rx", 20) // Rounded corners
          .attr("ry", 20)
          .attr("class", "career_tree_industry_button"); // Use external class

        // Reorder the text element to appear on top of the rectangle
        textElement.raise();
      });


        // Draw nodes for each category
        data.forEach((categoryData, i) => {
          const group = svg
            .append("g")
            .attr(
              "transform",
              `translate(${i * categoryWidth + categoryWidth / 2}, ${margin.top})`
            );

          group
            .selectAll(".node")
            .data(categoryData.nodes)
            .enter()
            .append("g")
            .attr("class", "node")
            .attr(
              "transform",
              d => `translate(0, ${d.level * levelSpacing - levelSpacing / 2})`
            )
            .call(node => {
              node
                .append("circle")
                .attr("r", 20)
                .attr("fill", "#f8f9fa")
                .attr("stroke", "#ccc")
                .attr("stroke-width", 2);

              node
                .append("text")
                .attr("text-anchor", "middle")
                .attr("dy", 5)
                .attr("font-size", 12)
                .text(d => d.name);
            });
        });
      });
      </script>

  </body>
</html>
